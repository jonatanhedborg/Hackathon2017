
static void render_head( int y_offset, float3 pos, float3 rot, graph_ns::graph<pal_screen, uint8_t>* screen )
	{
	(void) y_offset;
	int w = screen->screen->width;
	int h = screen->screen->height;
    float vertices[] = { 0.159371f, -0.0946919f, -0.0396757f, 0.125967f, -0.160935f, -0.0789855f, 0.166064f, -0.09448f, -0.0751952f, 0.0378464f, -0.24142f, 0.066056f, 0.0606017f, -0.212353f, 0.0855013f, 0.0f, -0.229064f, 0.0852644f, -0.00184103f, -0.243088f, 0.0651704f, 0.094541f, -0.235596f, 0.0496677f, 0.13733f, -0.142496f, 0.0278995f, 0.108321f, -0.18028f, 0.0637177f, 0.0737832f, -0.139842f, -0.176527f, 0.0541221f, -0.138988f, -0.184133f, 0.0484191f, -0.0922102f, -0.164564f, 0.103907f, -0.143476f, -0.150628f, 0.105614f, -0.0825339f, -0.163646f, 0.131633f, -0.0844799f, -0.145664f, 0.119916f, -0.154945f, -0.10464f, 0.148285f, -0.0889273f, -0.117712f, 0.127314f, -0.180651f, -0.0222727f, 0.0f, -0.0911908f, -0.169673f, -0.00184103f, -0.137771f, -0.198307f, -0.159371f, -0.0946919f, -0.0396757f, -0.166064f, -0.09448f, -0.0751952f, -0.139002f, -0.164608f, -0.0656528f, -0.0606017f, -0.212353f, 0.0855013f, -0.0415274f, -0.24142f, 0.066056f, -0.0965132f, -0.236053f, 0.047943f, -0.108321f, -0.18028f, 0.0637177f, -0.13733f, -0.142496f, 0.0278995f, -0.105614f, -0.0825339f, -0.163646f, -0.0544838f, -0.140809f, -0.183757f, -0.0970493f, -0.146335f, -0.161718f, -0.131633f, -0.0844799f, -0.145664f, -0.148285f, -0.0889273f, -0.117712f, -0.125128f, -0.1465f, -0.120348f, -0.128492f, -0.179129f, -0.0210677f, -0.0484191f, -0.0922102f, -0.164564f, -0.00692715f, -0.327829f, 0.102896f, -0.0219277f, -0.32272f, 0.102773f, -0.0222967f, -0.323799f, 0.103482f, -0.136831f, -0.177249f, -0.0891857f, -0.167259f, -0.268681f, -0.0244317f, -0.133161f, -0.216377f, -0.0206643f, 0.130726f, -0.177044f, -0.0900091f, 0.126668f, -0.217952f, -0.0180351f, 0.128302f, -0.218475f, -0.0174962f, 0.131748f, -0.177355f, -0.0896781f, -0.136213f, -0.177573f, -0.0881255f, -0.105906f, -0.155766f, -0.159898f, -0.107513f, -0.155177f, -0.160778f, -0.105373f, -0.270793f, 0.0493723f, -0.102672f, -0.270899f, 0.0506217f, -0.165353f, -0.34875f, 0.0696147f, -0.0549774f, -0.333462f, 0.120254f, -0.0540035f, -0.303156f, 0.0871466f, -0.101548f, -0.269813f, 0.0502091f, -0.0550043f, -0.304176f, 0.0876761f, 0.110833f, -0.258952f, 0.0310295f, 0.109982f, -0.257695f, 0.031314f, 0.0823778f, -0.290244f, 0.0753951f, 0.0815161f, -0.288126f, 0.0729119f, 0.0298363f, -0.317915f, 0.0993767f, 0.0289769f, -0.31681f, 0.0986672f, 0.0187788f, -0.321489f, 0.102317f, -0.0227761f, -0.324401f, 0.104451f, 0.0485382f, -0.333462f, 0.120254f, 0.158914f, -0.34875f, 0.0696147f, 0.16082f, -0.268681f, -0.0244317f, 0.0682165f, -0.150987f, -0.18808f, 0.0678254f, -0.151094f, -0.186042f, 0.113158f, -0.159399f, -0.145415f, 0.114064f, -0.159386f, -0.14615f, -0.0030845f, -0.149584f, -0.210998f, -0.00303841f, -0.149505f, -0.209436f, -0.0713033f, -0.150518f, -0.190419f, -0.0701405f, -0.150491f, -0.18942f, -0.132011f, -0.213035f, -0.0253764f, 0.0812891f, -0.18492f, -0.204679f, -0.00321932f, -0.182762f, -0.227597f, -0.0877274f, -0.18492f, -0.204679f, 0.134803f, -0.195787f, -0.155865f, -0.141241f, -0.195787f, -0.155865f, -0.178507f, -0.0541677f, -0.0406376f, -0.184869f, -0.062659f, -0.0406919f, -0.201195f, -0.0394286f, -0.0650152f, -0.195992f, -0.0310368f, -0.0663862f, -0.222577f, 0.024213f, -0.0866086f, -0.220177f, 0.0438828f, -0.0840446f, -0.209844f, 0.0280849f, -0.0801378f, -0.186781f, -0.0406137f, -0.0308267f, -0.181111f, -0.0475562f, -0.02228f, -0.181284f, -0.0289389f, -0.0250886f, -0.187932f, 0.0633142f, -0.0961661f, -0.184033f, 0.081283f, -0.139121f, -0.175042f, -0.000685218f, -0.129701f, -0.182391f, -0.0108179f, -0.090103f, -0.18398f, 0.150101f, -0.0729245f, -0.179096f, 0.205284f, -0.0879388f, -0.181444f, 0.170187f, -0.130074f, -0.0585859f, 0.315321f, -0.112414f, -0.0657318f, 0.23052f, -0.194122f, -0.135905f, 0.214192f, -0.181839f, -0.128157f, 0.289f, -0.107665f, -0.0578176f, 0.0850357f, -0.232182f, -0.133679f, 0.0973523f, -0.217116f, -0.18198f, 0.0483633f, -0.029527f, -0.197845f, 0.0565039f, -0.0430634f, -0.200826f, 0.0600448f, -0.0414558f, -0.171952f, -0.0591781f, -0.0110618f, -0.175575f, -0.0672591f, -0.0133315f, -0.172029f, -0.0672855f, -0.0155068f, -0.167451f, -0.0593568f, -0.0129972f, -0.183683f, -0.0647438f, -0.0200686f, -0.178326f, -0.0596609f, -0.0136354f, -0.164429f, -0.0631754f, -0.0310608f, -0.161039f, -0.058814f, -0.014558f, -0.17079f, -0.0633012f, -0.0277897f, -0.182405f, 0.0391837f, -0.0209828f, -0.192275f, 0.04794f, -0.0250722f, -0.176833f, -0.0685427f, -0.0257334f, -0.209738f, 0.0601509f, -0.0620627f, -0.219343f, 0.0596941f, -0.0586783f, -0.208159f, 0.0593169f, -0.0385273f, -0.231691f, 0.0444256f, -0.0807818f, -0.229677f, 0.0220623f, -0.0839758f, -0.203068f, -0.0118897f, -0.0759563f, -0.215821f, -0.00862065f, -0.0830313f, -0.221199f, -0.0100368f, -0.0799022f, -0.204844f, -0.039515f, -0.0632399f, -0.190202f, -0.0610045f, -0.0398506f, -0.166742f, -0.0495681f, -0.012805f, -0.168975f, -0.0313611f, -0.0135172f, -0.179066f, -0.0661604f, -0.0233249f, -0.22164f, -0.0131276f, -0.0748895f, -0.229585f, 0.0150535f, -0.0776553f, -0.226487f, 0.0389454f, -0.0722176f, -0.215824f, 0.00895793f, -0.0569301f, -0.19342f, -0.0578609f, -0.036867f, -0.169412f, -0.0485688f, -0.0534224f, -0.159371f, -0.0946919f, -0.0396757f, -0.166064f, -0.09448f, -0.0751952f, -0.0484191f, -0.0922102f, -0.164564f, -0.0516828f, -0.0105797f, -0.208604f, 0.0f, -0.0255965f, -0.206988f, 0.0f, -0.0911908f, -0.169673f, -0.120275f, 0.00875911f, -0.193156f, -0.187145f, 0.0266687f, -0.0801007f, -0.1787f, -0.0129884f, -0.07555f, -0.172425f, 0.192054f, -0.159962f, -0.169373f, 0.0889999f, -0.185573f, -0.187006f, 0.0845457f, -0.0671814f, -0.178283f, 0.146851f, -0.010757f, -0.171582f, 0.224173f, 0.000316543f, -0.180171f, 0.0831362f, -0.0229421f, -0.164073f, 0.250746f, -0.0997903f, -0.154048f, 0.268853f, 0.00362798f, -0.119188f, 0.307663f, 0.00649577f, -0.0528445f, 0.337181f, 0.00755715f, -0.188001f, 0.0544257f, -0.0683536f, 0.0f, 0.34875f, 0.00559461f, 0.0f, 0.328961f, -0.119572f, 0.0f, 0.237138f, -0.209444f, 0.0f, 0.07483f, -0.246514f, -0.154573f, 0.00559575f, -0.170419f, -0.105614f, -0.0825339f, -0.163646f, -0.131633f, -0.0844799f, -0.145664f, -0.148285f, -0.0889273f, -0.117712f, -0.211323f, 0.0467751f, -0.0401111f, -0.195779f, 0.0365099f, -0.0254985f, -0.218435f, 0.0522352f, -0.0567897f, -0.203113f, 0.017661f, -0.0401842f, -0.204577f, -0.00878594f, -0.0498563f, -0.207023f, -0.0363911f, -0.0589534f, -0.20318f, 0.0516328f, -0.0619871f, -0.18472f, 0.0550478f, -0.0431012f, -0.19242f, 0.00121422f, -0.0312726f, -0.183848f, 0.00552948f, -0.0204514f, -0.193326f, -0.0269795f, -0.0408159f, 0.195992f, -0.0310368f, -0.0663862f, 0.201195f, -0.0394286f, -0.0650152f, 0.184869f, -0.062659f, -0.0406919f, 0.178507f, -0.0541677f, -0.0406376f, 0.209844f, 0.0280849f, -0.0801378f, 0.220177f, 0.0438828f, -0.0840446f, 0.222577f, 0.024213f, -0.0866086f, 0.181284f, -0.0289389f, -0.0250886f, 0.181111f, -0.0475562f, -0.02228f, 0.186781f, -0.0406137f, -0.0308267f, 0.182391f, -0.0108179f, -0.090103f, 0.175042f, -0.000685218f, -0.129701f, 0.184033f, 0.081283f, -0.139121f, 0.187932f, 0.0633142f, -0.0961661f, 0.181444f, 0.170187f, -0.130074f, 0.179096f, 0.205284f, -0.0879388f, 0.18398f, 0.150101f, -0.0729245f, 0.128157f, 0.289f, -0.107665f, 0.135904f, 0.214192f, -0.181839f, 0.0657318f, 0.23052f, -0.194122f, 0.058586f, 0.315321f, -0.112414f, 0.133679f, 0.0973523f, -0.217116f, 0.0578176f, 0.0850357f, -0.232182f, 0.200826f, 0.0600448f, -0.0414558f, 0.197845f, 0.0565039f, -0.0430634f, 0.181979f, 0.0483633f, -0.029527f, 0.167451f, -0.0593568f, -0.0129972f, 0.172029f, -0.0672855f, -0.0155068f, 0.175575f, -0.0672591f, -0.0133315f, 0.171952f, -0.0591781f, -0.0110618f, 0.178326f, -0.0596609f, -0.0136354f, 0.183683f, -0.0647438f, -0.0200686f, 0.17079f, -0.0633012f, -0.0277897f, 0.161039f, -0.058814f, -0.014558f, 0.164429f, -0.0631754f, -0.0310608f, 0.192275f, 0.04794f, -0.0250722f, 0.182405f, 0.0391837f, -0.0209828f, 0.176833f, -0.0685427f, -0.0257334f, 0.208159f, 0.0593169f, -0.0385273f, 0.219343f, 0.0596941f, -0.0586783f, 0.209738f, 0.0601509f, -0.0620627f, 0.229677f, 0.0220623f, -0.0839758f, 0.231691f, 0.0444256f, -0.0807818f, 0.215821f, -0.00862065f, -0.0830313f, 0.203068f, -0.0118897f, -0.0759563f, 0.204844f, -0.039515f, -0.0632399f, 0.221199f, -0.0100368f, -0.0799022f, 0.190202f, -0.0610045f, -0.0398506f, 0.168975f, -0.0313611f, -0.0135172f, 0.166741f, -0.0495681f, -0.012805f, 0.179066f, -0.0661604f, -0.0233249f, 0.229585f, 0.0150535f, -0.0776553f, 0.22164f, -0.0131276f, -0.0748895f, 0.215824f, 0.00895793f, -0.0569301f, 0.226487f, 0.0389454f, -0.0722176f, 0.19342f, -0.0578609f, -0.036867f, 0.159371f, -0.0946919f, -0.0396757f, 0.169412f, -0.0485688f, -0.0534224f, 0.166064f, -0.09448f, -0.0751952f, 0.0516828f, -0.0105797f, -0.208604f, 0.0484191f, -0.0922102f, -0.164564f, 0.120275f, 0.00875911f, -0.193156f, 0.178701f, -0.0129884f, -0.07555f, 0.187145f, 0.0266687f, -0.0801007f, 0.169373f, 0.0889999f, -0.185573f, 0.172425f, 0.192054f, -0.159962f, 0.187006f, 0.0845457f, -0.0671814f, 0.171582f, 0.224173f, 0.000316543f, 0.178283f, 0.146851f, -0.010757f, 0.18017f, 0.0831362f, -0.0229421f, 0.119188f, 0.307663f, 0.00649577f, 0.154048f, 0.268853f, 0.00362798f, 0.164073f, 0.250746f, -0.0997903f, 0.0528444f, 0.337181f, 0.00755715f, 0.188001f, 0.0544257f, -0.0683536f, 0.154573f, 0.00559575f, -0.170419f, 0.131633f, -0.0844799f, -0.145664f, 0.105614f, -0.0825339f, -0.163646f, 0.148285f, -0.0889273f, -0.117712f, 0.195779f, 0.0365099f, -0.0254985f, 0.211323f, 0.0467751f, -0.0401111f, 0.218435f, 0.0522352f, -0.0567897f, 0.203113f, 0.017661f, -0.0401842f, 0.204577f, -0.00878594f, -0.0498563f, 0.207023f, -0.0363911f, -0.0589534f, 0.20318f, 0.0516328f, -0.0619871f, 0.184719f, 0.0550478f, -0.0431012f, 0.183849f, 0.00552948f, -0.0204514f, 0.19242f, 0.00121422f, -0.0312726f, 0.193326f, -0.0269795f, -0.0408159f, 0.0f, 0.0979945f, 0.210567f, 0.0f, 0.142774f, 0.204292f, -0.000518348f, 0.142668f, 0.20441f, 0.0f, 0.240282f, 0.183929f, -0.0972002f, 0.020209f, 0.146041f, -0.0761149f, -0.0326648f, 0.164039f, -0.0430933f, -0.0262186f, 0.18179f, -0.0151407f, 0.0842747f, 0.210402f, -0.0208155f, 0.0998805f, 0.215502f, -0.0440471f, 0.0988016f, 0.207753f, -0.0351182f, -0.0312818f, 0.210814f, -0.0385375f, -0.0226118f, 0.193536f, -0.0374597f, -0.0353319f, 0.19842f, -0.028512f, -0.0301764f, 0.224632f, -0.0247562f, -0.0348885f, 0.224033f, -0.0101421f, -0.0360732f, 0.242981f, -0.01231f, -0.0271054f, 0.24297f, -0.108487f, 0.26798f, 0.125506f, -0.134056f, 0.232651f, 0.113501f, -0.126758f, 0.191981f, 0.139925f, -0.101161f, 0.218031f, 0.167726f, 0.0f, 0.0845457f, 0.206573f, -0.0759057f, -0.130034f, 0.158138f, -0.105243f, -0.095923f, 0.132712f, -0.102104f, -0.14795f, 0.131975f, -0.0714774f, -0.170796f, 0.165291f, -0.0762433f, -0.098557f, 0.150278f, -0.0860344f, -0.0645853f, 0.148279f, -0.114348f, -0.0326451f, 0.139119f, -0.0255958f, 0.0812368f, 0.2027f, -0.0152055f, 0.0730631f, 0.20447f, -0.0455193f, 0.0887352f, 0.200449f, 0.0f, 0.0728379f, 0.206481f, -0.0122918f, -0.0512292f, 0.209646f, -0.0157864f, -0.0444654f, 0.209468f, -0.0278378f, -0.0457558f, 0.19818f, -0.0325874f, -0.0397995f, 0.199811f, -0.0269437f, -0.0419439f, 0.200598f, -0.0186912f, -0.0329165f, 0.207984f, -0.128728f, 0.0472516f, 0.11344f, -0.139155f, 0.026404f, 0.113854f, -0.112513f, 0.0343591f, 0.127395f, -0.160026f, -0.0835201f, -0.000701258f, -0.151371f, -0.124892f, 0.04612f, -0.14958f, -0.116096f, 0.0585039f, -0.0803115f, -0.191657f, 0.125937f, -0.0689346f, -0.1913f, 0.151428f, -0.0976053f, -0.170154f, 0.123066f, -0.0623578f, 0.038072f, 0.159401f, -0.0630293f, 0.0441739f, 0.158397f, -0.0934781f, 0.0410172f, 0.14432f, -0.0937501f, 0.0301034f, 0.143471f, -0.116738f, 0.0533472f, 0.121044f, -0.111379f, 0.0492304f, 0.127189f, -0.144064f, 0.0623876f, 0.106724f, -0.143671f, 0.0441475f, 0.104058f, -0.0442583f, 0.0449218f, 0.164539f, -0.0290352f, 0.0394618f, 0.168722f, -0.0272026f, 0.0552332f, 0.178663f, -0.0394239f, 0.0555177f, 0.165769f, -0.0606017f, -0.212353f, 0.0855013f, -0.0510732f, -0.21416f, 0.134768f, -0.108321f, -0.18028f, 0.0637177f, -0.0394295f, 0.150047f, 0.195547f, -0.136619f, -0.132741f, 0.0914406f, -0.135492f, -0.144965f, 0.0859964f, -0.0131364f, -0.0640555f, 0.20971f, 0.0f, -0.0681392f, 0.210687f, 0.0f, -0.0531949f, 0.211166f, -0.0224019f, -0.0355769f, 0.218843f, -0.0132817f, -0.0393959f, 0.229502f, -0.161206f, 0.0687877f, 0.0664246f, -0.0647927f, 0.0280651f, 0.154876f, -0.0286213f, -0.036285f, 0.210835f, -0.0667294f, -0.0489925f, 0.16378f, -0.0354357f, -0.0418642f, 0.188726f, -0.0269437f, -0.0419439f, 0.200598f, -0.0325874f, -0.0397995f, 0.199811f, -0.0413749f, -0.0366227f, 0.182493f, 0.0f, -0.036113f, 0.245708f, 0.0f, -0.025742f, 0.246514f, -0.0130338f, 0.056021f, 0.199558f, -0.0281135f, 0.0694627f, 0.184757f, 0.0f, -0.0113935f, 0.243511f, -0.0135964f, -0.0124791f, 0.238715f, -0.0490213f, 0.056034f, 0.164633f, -0.0623191f, 0.070164f, 0.16319f, -0.0623072f, 0.0693699f, 0.158761f, -0.0512894f, 0.0544656f, 0.160189f, -0.0439213f, 0.0665837f, 0.166563f, -0.0561107f, 0.0771795f, 0.164859f, -0.0485923f, 0.0511101f, 0.159673f, -0.046713f, 0.048615f, 0.16381f, -0.0449852f, 0.0515669f, 0.164821f, -0.0130598f, 0.0448824f, 0.201022f, -0.0904204f, 0.0750817f, 0.151312f, -0.0895971f, 0.0748434f, 0.148042f, -0.163482f, -0.0498395f, -0.00842312f, -0.0132817f, -0.0393959f, 0.229502f, -0.0104198f, -0.04385f, 0.217432f, -0.00677149f, -0.0411825f, 0.239176f, 0.0f, 0.305486f, 0.120593f, -0.0484921f, 0.292574f, 0.124186f, -0.0436882f, 0.235199f, 0.180232f, -0.148959f, 0.117379f, 0.105014f, -0.158098f, 0.138605f, 0.0814456f, -0.144719f, 0.0818589f, 0.116406f, -0.0499518f, 0.0811307f, 0.18397f, -0.146355f, -0.0421557f, 0.0799545f, -0.160148f, 0.0207913f, 0.0689766f, 0.0f, -0.229064f, 0.0852644f, 0.0f, -0.222644f, 0.128836f, -0.0470909f, -0.213716f, 0.171946f, 0.0f, -0.218064f, 0.178269f, -0.140044f, -0.0868097f, 0.0814244f, -0.15116f, 0.202498f, 0.100804f, -0.051378f, -0.180227f, 0.189927f, -0.0692199f, -0.0818589f, 0.157279f, -0.0141007f, -0.0788742f, 0.214951f, 0.0f, -0.0855521f, 0.21659f, -0.054016f, -0.0581059f, 0.177865f, -0.0442056f, -0.0848968f, 0.194838f, 0.0f, 0.0589f, 0.204781f, 0.0f, 0.0475759f, 0.207365f, -0.0134335f, -0.00183672f, 0.22733f, -0.0266876f, -0.0105134f, 0.210747f, -0.0290853f, -0.0189518f, 0.216873f, -0.124887f, 0.120761f, 0.145501f, -0.0962915f, 0.145951f, 0.17301f, -0.153998f, -0.0835599f, -0.00917231f, -0.033865f, -0.0585094f, 0.196719f, -0.111075f, 0.0609781f, 0.128873f, -0.10963f, 0.0602897f, 0.126511f, -0.0953094f, 0.0800585f, 0.148688f, -0.0969891f, 0.0884638f, 0.160502f, -0.113414f, 0.065975f, 0.127302f, -0.119364f, 0.0609978f, 0.122096f, -0.124681f, 0.0728114f, 0.133296f, -0.127636f, 0.0789997f, 0.137008f, -0.100761f, 0.0967037f, 0.173865f, 0.0f, 0.00118148f, 0.23088f, 0.0f, -0.0425194f, 0.239545f, 0.0f, -0.0481187f, 0.226043f, -0.0286213f, -0.036285f, 0.210835f, -0.0324397f, -0.0351071f, 0.211454f, -0.0224019f, -0.0355769f, 0.218843f, -0.0364878f, -0.0155829f, 0.19109f, -0.0157864f, -0.0444654f, 0.209468f, -0.0104198f, -0.04385f, 0.217432f, -0.0431164f, -0.128081f, 0.181386f, -0.0221366f, -0.132231f, 0.188234f, -0.0220782f, -0.124104f, 0.199814f, -0.0436873f, -0.121456f, 0.187688f, -0.0499133f, -0.145832f, 0.176576f, 0.0f, -0.176184f, 0.198789f, 0.0f, -0.149081f, 0.18486f, -0.13733f, -0.142496f, 0.0278995f, -0.100247f, 0.10677f, 0.178928f, -0.130272f, 0.0919652f, 0.142765f, 0.0f, -0.131377f, 0.194388f, -0.0928328f, 0.0425194f, 0.140122f, -0.0631064f, 0.0460469f, 0.154507f, -0.044687f, -0.111668f, 0.187424f, -0.0162251f, -0.0892847f, 0.212931f, -0.0426245f, -0.0947913f, 0.193193f, -0.0416597f, -0.102237f, 0.186755f, -0.0177976f, -0.100146f, 0.202197f, -0.0416597f, -0.102237f, 0.186755f, 0.0f, -0.102482f, 0.204269f, 0.0f, -0.0934015f, 0.214601f, 0.0f, -0.123568f, 0.203416f, 0.0f, -0.109901f, 0.206305f, -0.0202421f, -0.109583f, 0.203464f, -0.0177976f, -0.100146f, 0.202197f, 0.0f, -0.102482f, 0.204269f, -0.10963f, 0.0602897f, 0.126511f, -0.116738f, 0.0533472f, 0.121044f, -0.111379f, 0.0492304f, 0.127189f, -0.0928328f, 0.0425194f, 0.140122f, -0.0895971f, 0.0748434f, 0.148042f, -0.0631064f, 0.0460469f, 0.154507f, -0.0623072f, 0.0693699f, 0.158761f, -0.0512894f, 0.0544656f, 0.160189f, -0.0485923f, 0.0511101f, 0.159673f, 0.000518348f, 0.142668f, 0.20441f, 0.0430933f, -0.0262186f, 0.18179f, 0.0761149f, -0.0326648f, 0.164039f, 0.0972002f, 0.020209f, 0.146041f, 0.044047f, 0.0988016f, 0.207753f, 0.0208155f, 0.0998805f, 0.215502f, 0.0151407f, 0.0842747f, 0.210402f, 0.0374597f, -0.0353319f, 0.19842f, 0.0385375f, -0.0226118f, 0.193536f, 0.0351182f, -0.0312818f, 0.210814f, 0.01231f, -0.0271054f, 0.24297f, 0.0101421f, -0.0360732f, 0.242981f, 0.0247562f, -0.0348885f, 0.224033f, 0.028512f, -0.0301764f, 0.224632f, 0.101161f, 0.218031f, 0.167726f, 0.126758f, 0.191981f, 0.139925f, 0.134056f, 0.232651f, 0.113501f, 0.108487f, 0.26798f, 0.125506f, 0.0714774f, -0.170796f, 0.165291f, 0.102104f, -0.14795f, 0.131975f, 0.105243f, -0.095923f, 0.132712f, 0.0759057f, -0.130034f, 0.158138f, 0.0762433f, -0.098557f, 0.150278f, 0.114348f, -0.0326451f, 0.139119f, 0.0860344f, -0.0645853f, 0.148279f, 0.0152055f, 0.0730631f, 0.20447f, 0.0255958f, 0.0812368f, 0.2027f, 0.0455192f, 0.0887352f, 0.200449f, 0.0278378f, -0.0457558f, 0.19818f, 0.0157864f, -0.0444654f, 0.209468f, 0.0122918f, -0.0512292f, 0.209646f, 0.0186912f, -0.0329165f, 0.207984f, 0.0269437f, -0.0419439f, 0.200598f, 0.0325874f, -0.0397995f, 0.199811f, 0.112513f, 0.0343591f, 0.127395f, 0.139155f, 0.026404f, 0.113854f, 0.128728f, 0.0472516f, 0.11344f, 0.14958f, -0.116096f, 0.0585039f, 0.151371f, -0.124892f, 0.04612f, 0.160026f, -0.0835201f, -0.000701258f, 0.0976053f, -0.170154f, 0.123066f, 0.0689346f, -0.1913f, 0.151428f, 0.0803115f, -0.191657f, 0.125937f, 0.0937501f, 0.0301034f, 0.143471f, 0.0934781f, 0.0410172f, 0.14432f, 0.0630292f, 0.0441739f, 0.158397f, 0.0623578f, 0.038072f, 0.159401f, 0.111379f, 0.0492304f, 0.127189f, 0.116738f, 0.0533472f, 0.121044f, 0.143671f, 0.0441475f, 0.104058f, 0.144064f, 0.0623876f, 0.106724f, 0.0394239f, 0.0555177f, 0.165769f, 0.0272026f, 0.0552332f, 0.178663f, 0.0290354f, 0.0394618f, 0.168722f, 0.0442581f, 0.0449218f, 0.164539f, 0.108321f, -0.18028f, 0.0637177f, 0.0510732f, -0.21416f, 0.134768f, 0.0606017f, -0.212353f, 0.0855013f, 0.0394294f, 0.150047f, 0.195547f, 0.135492f, -0.144965f, 0.0859964f, 0.136619f, -0.132741f, 0.0914406f, 0.0131364f, -0.0640555f, 0.20971f, 0.0132817f, -0.0393959f, 0.229502f, 0.0224019f, -0.0355769f, 0.218843f, 0.161206f, 0.0687877f, 0.0664246f, 0.0647927f, 0.0280651f, 0.154876f, 0.0286213f, -0.036285f, 0.210835f, 0.0667294f, -0.0489925f, 0.16378f, 0.0325874f, -0.0397995f, 0.199811f, 0.0269437f, -0.0419439f, 0.200598f, 0.0354357f, -0.0418642f, 0.188726f, 0.0413749f, -0.0366227f, 0.182493f, 0.0281135f, 0.0694627f, 0.184757f, 0.0130338f, 0.056021f, 0.199558f, 0.0135964f, -0.0124791f, 0.238715f, 0.0512893f, 0.0544656f, 0.160189f, 0.0623071f, 0.0693699f, 0.158761f, 0.062319f, 0.070164f, 0.16319f, 0.0490213f, 0.056034f, 0.164633f, 0.0561105f, 0.0771795f, 0.164859f, 0.0439213f, 0.0665837f, 0.166563f, 0.0449852f, 0.0515669f, 0.164821f, 0.0467131f, 0.048615f, 0.16381f, 0.0485923f, 0.0511101f, 0.159673f, 0.0130598f, 0.0448824f, 0.201022f, 0.0895971f, 0.0748434f, 0.148042f, 0.0904204f, 0.0750817f, 0.151312f, 0.163482f, -0.0498395f, -0.00842312f, 0.00677149f, -0.0411825f, 0.239176f, 0.0104198f, -0.04385f, 0.217432f, 0.0132817f, -0.0393959f, 0.229502f, 0.0436882f, 0.235199f, 0.180232f, 0.048492f, 0.292574f, 0.124186f, 0.158098f, 0.138605f, 0.0814456f, 0.148959f, 0.117379f, 0.105014f, 0.144719f, 0.0818589f, 0.116406f, 0.0499518f, 0.0811307f, 0.18397f, 0.160148f, 0.0207913f, 0.0689766f, 0.146355f, -0.0421557f, 0.0799545f, 0.0470907f, -0.213716f, 0.171946f, 0.140043f, -0.0868097f, 0.0814244f, 0.15116f, 0.202498f, 0.100804f, 0.0513778f, -0.180227f, 0.189927f, 0.0692199f, -0.0818589f, 0.157279f, 0.0141007f, -0.0788742f, 0.214951f, 0.0442056f, -0.0848968f, 0.194838f, 0.0540158f, -0.0581059f, 0.177865f, 0.0290853f, -0.0189518f, 0.216873f, 0.0266876f, -0.0105134f, 0.210747f, 0.0134335f, -0.00183672f, 0.22733f, 0.124887f, 0.120761f, 0.145501f, 0.0962915f, 0.145951f, 0.17301f, 0.153998f, -0.0835599f, -0.00917231f, 0.033865f, -0.0585094f, 0.196719f, 0.10963f, 0.0602897f, 0.126511f, 0.111075f, 0.0609781f, 0.128873f, 0.0969891f, 0.0884638f, 0.160502f, 0.0953094f, 0.0800585f, 0.148688f, 0.119364f, 0.0609978f, 0.122096f, 0.113414f, 0.065975f, 0.127302f, 0.124681f, 0.0728114f, 0.133296f, 0.127636f, 0.0789997f, 0.137008f, 0.100761f, 0.0967037f, 0.173865f, 0.0324397f, -0.0351071f, 0.211454f, 0.0286213f, -0.036285f, 0.210835f, 0.0224019f, -0.0355769f, 0.218843f, 0.0364878f, -0.0155829f, 0.19109f, 0.0157864f, -0.0444654f, 0.209468f, 0.0104198f, -0.04385f, 0.217432f, 0.0436873f, -0.121456f, 0.187688f, 0.0220782f, -0.124104f, 0.199814f, 0.0221366f, -0.132231f, 0.188234f, 0.0431163f, -0.128081f, 0.181386f, 0.0499132f, -0.145832f, 0.176576f, 0.13733f, -0.142496f, 0.0278995f, 0.130272f, 0.0919652f, 0.142765f, 0.100247f, 0.10677f, 0.178928f, 0.0928328f, 0.0425194f, 0.140122f, 0.0631063f, 0.0460469f, 0.154507f, 0.0446871f, -0.111668f, 0.187424f, 0.0177976f, -0.100146f, 0.202197f, 0.0416597f, -0.102237f, 0.186755f, 0.0426243f, -0.0947913f, 0.193193f, 0.0162251f, -0.0892847f, 0.212931f, 0.0416597f, -0.102237f, 0.186755f, 0.0202421f, -0.109583f, 0.203464f, 0.0177976f, -0.100146f, 0.202197f, 0.111379f, 0.0492304f, 0.127189f, 0.116738f, 0.0533472f, 0.121044f, 0.10963f, 0.0602897f, 0.126511f, 0.0895971f, 0.0748434f, 0.148042f, 0.0928328f, 0.0425194f, 0.140122f, 0.0623071f, 0.0693699f, 0.158761f, 0.0631063f, 0.0460469f, 0.154507f, 0.0485923f, 0.0511101f, 0.159673f, 0.0512893f, 0.0544656f, 0.160189f, 0.0879087f, 0.0584499f, 0.150506f, 0.0829622f, 0.058165f, 0.154202f, 0.0819469f, 0.0549685f, 0.153533f, 0.0857935f, 0.0517783f, 0.149111f, 0.0868266f, 0.0639892f, 0.151632f, 0.0824784f, 0.0614412f, 0.154809f, 0.0830615f, 0.0681455f, 0.153651f, 0.0806974f, 0.0638768f, 0.155826f, 0.0777218f, 0.0697076f, 0.156443f, 0.078144f, 0.0647967f, 0.157185f, 0.0721233f, 0.068351f, 0.15869f, 0.0754477f, 0.0639892f, 0.158246f, 0.0678532f, 0.0643403f, 0.160115f, 0.0733729f, 0.0616266f, 0.158883f, 0.0659805f, 0.0588798f, 0.160113f, 0.0724364f, 0.0583769f, 0.158813f, 0.066869f, 0.0521425f, 0.157921f, 0.0728633f, 0.0551405f, 0.157762f, 0.0703662f, 0.0471921f, 0.154646f, 0.0745417f, 0.0527646f, 0.15619f, 0.0756165f, 0.0453191f, 0.151487f, 0.0770619f, 0.0518643f, 0.154674f, 0.0811924f, 0.0470331f, 0.14932f, 0.0797384f, 0.052692f, 0.153633f, 0.0778859f, 0.058152f, 0.157464f, -0.0857935f, 0.0517783f, 0.149111f, -0.0819469f, 0.0549685f, 0.153533f, -0.0829622f, 0.058165f, 0.154202f, -0.0879087f, 0.0584499f, 0.150506f, -0.0824784f, 0.0614412f, 0.154809f, -0.0868266f, 0.0639892f, 0.151632f, -0.0806974f, 0.0638768f, 0.155826f, -0.0830615f, 0.0681455f, 0.153651f, -0.078144f, 0.0647967f, 0.157185f, -0.0777218f, 0.0697076f, 0.156443f, -0.0754477f, 0.0639892f, 0.158246f, -0.0721233f, 0.068351f, 0.15869f, -0.0733729f, 0.0616266f, 0.158883f, -0.0678532f, 0.0643403f, 0.160115f, -0.0724364f, 0.0583769f, 0.158813f, -0.0659805f, 0.0588798f, 0.160113f, -0.0728633f, 0.0551405f, 0.157762f, -0.066869f, 0.0521425f, 0.157921f, -0.0745417f, 0.0527646f, 0.15619f, -0.0703662f, 0.0471921f, 0.154646f, -0.0770619f, 0.0518643f, 0.154674f, -0.0756165f, 0.0453191f, 0.151487f, -0.0797384f, 0.052692f, 0.153633f, -0.0811924f, 0.0470331f, 0.14932f, -0.0778859f, 0.058152f, 0.157464f,  };
    int const indices[] = { 1, 2, 3, 0, 4, 5, 6, 7, 8, 9, 10, 0, 11, 12, 13, 0, 14, 11, 15, 16, 17, 14, 16, 18, 19, 2, 1, 0, 3, 2, 17, 18, 20, 13, 12, 21, 4, 8, 10, 5, 19, 1, 9, 0, 22, 23, 24, 0, 7, 6, 25, 26, 27, 28, 29, 0, 30, 31, 32, 0, 33, 30, 32, 0, 34, 33, 32, 35, 36, 22, 24, 0, 34, 35, 24, 23, 21, 31, 37, 20, 25, 28, 27, 26, 36, 29, 22, 0, 8, 19, 9, 0, 36, 27, 29, 0, 69, 70, 71, 72, 70, 69, 73, 74, 47, 72, 71, 44, 73, 75, 76, 74, 76, 75, 50, 49, 21, 74, 76, 31, 31, 76, 49, 32, 35, 32, 49, 48, 35, 48, 24, 0, 24, 48, 77, 0, 36, 77, 56, 27, 27, 56, 55, 26, 26, 55, 39, 7, 7, 39, 38, 0, 7, 38, 64, 0, 7, 64, 63, 4, 4, 63, 61, 8, 8, 59, 45, 19, 19, 45, 44, 2, 17, 44, 71, 14, 14, 71, 70, 11, 11, 70, 12, 0, 12, 70, 74, 21, 24, 77, 36, 0, 31, 30, 37, 0, 11, 13, 15, 0, 59, 8, 61, 0, 2, 44, 17, 0, 83, 84, 85, 86, 87, 88, 89, 0, 90, 91, 92, 0, 93, 94, 95, 96, 97, 98, 99, 0, 100, 101, 102, 103, 101, 104, 105, 102, 94, 93, 99, 0, 106, 107, 108, 0, 109, 110, 111, 112, 113, 114, 91, 0, 115, 116, 112, 117, 118, 106, 119, 0, 112, 111, 120, 117, 120, 84, 83, 117, 108, 121, 122, 123, 124, 88, 87, 125, 126, 127, 87, 89, 128, 127, 85, 129, 85, 84, 130, 129, 131, 132, 114, 0, 133, 120, 111, 110, 131, 114, 109, 0, 133, 110, 114, 113, 128, 134, 135, 125, 136, 135, 137, 0, 135, 136, 124, 125, 91, 90, 138, 113, 139, 22, 115, 0, 139, 96, 23, 22, 37, 143, 144, 20, 105, 104, 143, 146, 147, 93, 96, 148, 149, 102, 105, 150, 151, 97, 99, 93, 98, 97, 152, 153, 151, 154, 152, 97, 155, 156, 157, 103, 157, 158, 100, 103, 151, 93, 159, 0, 156, 155, 98, 153, 160, 161, 100, 158, 155, 149, 99, 98, 161, 162, 101, 100, 103, 102, 149, 155, 99, 149, 150, 94, 101, 162, 163, 104, 147, 159, 93, 0, 94, 150, 164, 95, 104, 163, 144, 143, 105, 146, 164, 150, 164, 146, 30, 33, 143, 37, 30, 146, 164, 33, 34, 95, 123, 168, 169, 119, 170, 122, 124, 136, 170, 171, 168, 0, 171, 170, 136, 137, 135, 134, 172, 137, 129, 130, 138, 173, 173, 134, 128, 129, 92, 91, 114, 132, 133, 130, 84, 120, 109, 112, 131, 0, 148, 139, 83, 86, 127, 128, 125, 87, 89, 88, 121, 174, 124, 122, 121, 88, 169, 118, 119, 0, 148, 126, 89, 147, 119, 106, 108, 123, 89, 174, 159, 147, 106, 175, 107, 0, 138, 130, 133, 113, 126, 86, 85, 127, 108, 107, 174, 121, 126, 148, 86, 0, 175, 106, 154, 0, 176, 177, 118, 169, 106, 118, 154, 0, 154, 151, 159, 175, 175, 159, 174, 107, 23, 96, 95, 34, 139, 148, 96, 0, 139, 115, 117, 83, 92, 132, 177, 176, 134, 173, 178, 172, 114, 110, 109, 0, 176, 169, 171, 0, 138, 90, 178, 173, 122, 170, 168, 123, 178, 92, 176, 172, 171, 137, 172, 176, 178, 90, 92, 0, 168, 171, 169, 0, 115, 22, 116, 0, 179, 180, 181, 182, 183, 184, 185, 0, 186, 187, 188, 0, 189, 190, 191, 192, 193, 194, 195, 0, 196, 197, 198, 199, 197, 200, 201, 198, 193, 192, 191, 0, 202, 203, 204, 0, 205, 206, 207, 208, 187, 209, 210, 0, 211, 205, 212, 213, 214, 204, 215, 0, 211, 216, 206, 205, 211, 182, 181, 216, 217, 218, 219, 202, 220, 185, 184, 221, 183, 185, 222, 223, 224, 180, 222, 225, 224, 226, 181, 180, 209, 227, 228, 0, 207, 206, 216, 229, 208, 209, 228, 0, 210, 209, 207, 229, 220, 230, 231, 225, 232, 230, 233, 0, 220, 221, 233, 230, 210, 234, 188, 187, 213, 1, 236, 0, 1, 3, 189, 236, 20, 144, 238, 13, 240, 238, 201, 200, 241, 189, 192, 242, 243, 200, 197, 244, 192, 193, 195, 245, 246, 247, 195, 194, 195, 247, 248, 245, 196, 249, 250, 251, 196, 199, 252, 249, 253, 192, 245, 0, 246, 194, 251, 250, 252, 199, 161, 160, 194, 193, 244, 251, 199, 198, 162, 161, 251, 244, 197, 196, 191, 243, 244, 193, 201, 163, 162, 198, 192, 253, 242, 0, 190, 254, 243, 191, 238, 144, 163, 201, 243, 254, 240, 200, 16, 15, 240, 254, 240, 15, 13, 238, 190, 18, 16, 254, 214, 258, 259, 217, 233, 221, 218, 260, 259, 261, 260, 0, 232, 233, 260, 261, 232, 262, 231, 230, 263, 234, 226, 224, 224, 225, 231, 263, 227, 209, 187, 186, 216, 181, 226, 229, 228, 205, 208, 0, 179, 182, 236, 241, 185, 220, 225, 222, 264, 219, 184, 183, 184, 219, 218, 221, 214, 215, 258, 0, 242, 183, 223, 241, 217, 202, 204, 214, 242, 253, 264, 183, 203, 265, 204, 0, 210, 229, 226, 234, 222, 180, 179, 223, 219, 264, 203, 202, 179, 241, 223, 0, 248, 204, 265, 0, 258, 215, 266, 267, 248, 215, 204, 0, 265, 253, 245, 248, 203, 264, 253, 265, 18, 190, 189, 3, 189, 241, 236, 0, 182, 211, 213, 236, 267, 266, 227, 186, 262, 268, 263, 231, 208, 207, 209, 0, 261, 258, 267, 0, 263, 268, 188, 234, 217, 259, 260, 218, 262, 267, 186, 268, 267, 262, 232, 261, 186, 188, 268, 0, 258, 261, 259, 0, 212, 1, 213, 0, 269, 270, 271, 0, 272, 271, 270, 0, 273, 274, 275, 0, 276, 277, 278, 0, 279, 280, 281, 0, 282, 283, 284, 285, 286, 287, 288, 289, 290, 269, 277, 276, 157, 156, 287, 286, 291, 292, 293, 294, 295, 292, 291, 0, 296, 297, 292, 0, 298, 299, 276, 0, 278, 300, 298, 276, 276, 299, 301, 290, 302, 303, 304, 0, 305, 306, 307, 0, 308, 309, 310, 0, 311, 312, 313, 0, 314, 315, 316, 0, 317, 318, 319, 320, 321, 310, 322, 0, 323, 324, 308, 0, 325, 326, 327, 328, 25, 330, 314, 28, 332, 278, 277, 0, 333, 334, 316, 293, 302, 335, 336, 337, 338, 307, 339, 0, 340, 324, 323, 0, 320, 273, 341, 317, 342, 307, 338, 0, 297, 296, 343, 274, 344, 304, 345, 346, 347, 344, 346, 281, 285, 284, 348, 349, 327, 350, 299, 351, 352, 353, 285, 349, 354, 355, 356, 357, 354, 358, 359, 355, 360, 361, 362, 0, 363, 350, 327, 326, 364, 365, 356, 355, 366, 131, 112, 116, 367, 368, 369, 0, 370, 371, 372, 272, 340, 373, 374, 0, 323, 375, 340, 0, 376, 298, 300, 0, 377, 297, 309, 378, 25, 6, 380, 330, 381, 330, 380, 382, 383, 313, 333, 0, 384, 287, 156, 153, 340, 118, 177, 378, 366, 311, 383, 377, 381, 315, 314, 330, 315, 381, 385, 294, 333, 313, 312, 334, 293, 292, 383, 333, 377, 292, 297, 0, 292, 295, 386, 296, 335, 387, 388, 336, 389, 386, 390, 0, 132, 377, 378, 177, 273, 309, 297, 274, 340, 378, 309, 324, 391, 350, 363, 392, 353, 393, 394, 395, 376, 351, 299, 298, 271, 332, 277, 269, 154, 340, 374, 152, 288, 373, 396, 0, 289, 397, 332, 372, 332, 271, 272, 372, 372, 371, 286, 289, 288, 287, 384, 0, 158, 371, 370, 160, 384, 153, 152, 374, 371, 158, 157, 286, 116, 22, 398, 0, 399, 390, 387, 335, 288, 384, 374, 373, 366, 132, 131, 0, 400, 321, 401, 0, 402, 359, 376, 403, 310, 320, 319, 322, 361, 318, 317, 325, 288, 396, 397, 289, 400, 404, 405, 321, 404, 402, 403, 406, 355, 359, 402, 364, 323, 406, 407, 0, 403, 376, 300, 408, 404, 406, 405, 0, 408, 407, 406, 403, 352, 409, 393, 353, 391, 301, 299, 350, 386, 389, 343, 296, 279, 282, 395, 280, 348, 284, 369, 410, 369, 368, 411, 410, 281, 346, 412, 413, 411, 368, 302, 337, 413, 279, 281, 0, 413, 283, 282, 279, 303, 345, 304, 0, 413, 412, 414, 283, 302, 368, 303, 0, 275, 274, 343, 347, 415, 275, 280, 0, 280, 395, 394, 415, 416, 307, 306, 0, 305, 307, 342, 0, 308, 310, 321, 0, 310, 309, 273, 320, 341, 326, 325, 317, 283, 414, 367, 0, 416, 417, 339, 307, 418, 419, 420, 421, 390, 399, 389, 0, 344, 347, 343, 389, 335, 302, 304, 399, 418, 295, 291, 422, 422, 385, 423, 424, 291, 294, 385, 422, 385, 381, 382, 423, 392, 363, 393, 409, 405, 308, 321, 0, 312, 311, 398, 29, 294, 293, 316, 315, 398, 311, 366, 116, 399, 304, 344, 389, 311, 313, 383, 0, 426, 427, 407, 408, 395, 282, 285, 353, 283, 367, 369, 284, 312, 29, 28, 334, 314, 316, 28, 0, 424, 419, 418, 422, 428, 419, 424, 0, 358, 328, 327, 351, 275, 415, 341, 273, 358, 351, 376, 359, 280, 275, 347, 281, 415, 394, 326, 341, 324, 309, 308, 0, 154, 118, 340, 0, 132, 366, 377, 0, 363, 326, 394, 393, 404, 400, 364, 402, 401, 365, 364, 400, 322, 319, 429, 0, 319, 318, 430, 429, 328, 362, 361, 325, 328, 358, 354, 362, 421, 431, 295, 0, 432, 433, 434, 435, 390, 433, 432, 387, 295, 431, 436, 0, 435, 437, 438, 432, 420, 439, 440, 441, 441, 442, 436, 431, 440, 443, 442, 441, 295, 434, 433, 0, 420, 441, 431, 421, 428, 439, 420, 419, 421, 295, 418, 0, 438, 388, 387, 432, 295, 390, 386, 0, 390, 295, 433, 0, 407, 427, 375, 323, 397, 426, 278, 332, 427, 426, 397, 396, 375, 427, 396, 373, 408, 300, 278, 426, 444, 445, 446, 0, 444, 446, 447, 448, 448, 447, 449, 450, 354, 357, 360, 362, 361, 360, 430, 318, 451, 450, 449, 452, 323, 308, 405, 406, 373, 340, 375, 0, 398, 22, 29, 0, 334, 28, 316, 0, 292, 377, 383, 0, 453, 270, 269, 0, 270, 453, 272, 0, 454, 455, 456, 0, 457, 458, 459, 0, 460, 461, 462, 0, 463, 464, 465, 466, 467, 468, 469, 470, 459, 458, 269, 290, 470, 469, 250, 249, 471, 472, 473, 474, 474, 473, 475, 0, 473, 476, 477, 0, 459, 478, 479, 0, 459, 479, 480, 457, 290, 301, 478, 459, 481, 482, 483, 0, 484, 485, 486, 0, 487, 488, 489, 0, 490, 491, 492, 0, 493, 494, 495, 0, 496, 497, 498, 499, 500, 487, 501, 0, 489, 502, 503, 0, 504, 505, 506, 507, 10, 495, 509, 5, 458, 457, 511, 0, 472, 493, 512, 513, 337, 336, 514, 483, 515, 484, 516, 0, 503, 502, 517, 0, 499, 518, 456, 496, 516, 484, 519, 0, 455, 520, 477, 476, 521, 522, 481, 523, 460, 521, 523, 524, 349, 348, 464, 463, 525, 478, 526, 505, 349, 463, 527, 352, 528, 529, 530, 531, 530, 532, 533, 531, 534, 535, 536, 0, 506, 505, 526, 537, 530, 529, 538, 539, 212, 205, 228, 540, 541, 542, 543, 0, 272, 544, 545, 370, 546, 547, 517, 0, 517, 548, 503, 0, 480, 479, 549, 0, 550, 488, 476, 551, 509, 380, 6, 5, 382, 380, 509, 552, 513, 490, 553, 0, 246, 250, 469, 554, 550, 266, 215, 517, 551, 553, 492, 540, 509, 495, 494, 552, 471, 555, 552, 494, 512, 491, 490, 513, 513, 553, 473, 472, 476, 473, 551, 0, 477, 556, 475, 473, 336, 388, 557, 514, 558, 556, 559, 0, 266, 550, 551, 227, 455, 476, 488, 456, 502, 488, 550, 517, 392, 537, 526, 391, 560, 561, 562, 527, 479, 478, 525, 549, 269, 458, 511, 453, 247, 546, 517, 248, 563, 547, 468, 0, 544, 511, 564, 467, 544, 272, 453, 511, 467, 470, 545, 544, 554, 469, 468, 0, 160, 370, 545, 252, 546, 247, 246, 554, 470, 249, 252, 545, 565, 1, 212, 0, 514, 557, 558, 566, 547, 546, 554, 468, 228, 227, 540, 0, 567, 501, 568, 0, 569, 549, 532, 570, 500, 497, 496, 487, 507, 499, 498, 535, 467, 564, 563, 468, 501, 571, 572, 568, 573, 569, 570, 572, 539, 570, 532, 530, 574, 573, 503, 0, 575, 480, 549, 569, 571, 573, 572, 0, 569, 573, 574, 575, 527, 562, 409, 352, 526, 478, 301, 391, 477, 520, 559, 556, 461, 560, 466, 462, 410, 541, 464, 348, 410, 411, 542, 541, 576, 577, 521, 460, 337, 483, 542, 411, 460, 462, 576, 0, 462, 466, 465, 576, 481, 522, 482, 0, 465, 578, 577, 576, 482, 542, 483, 0, 524, 520, 455, 454, 461, 454, 579, 0, 579, 561, 560, 461, 485, 484, 580, 0, 519, 484, 486, 0, 501, 487, 489, 0, 496, 456, 488, 487, 499, 507, 506, 518, 543, 578, 465, 0, 484, 515, 581, 580, 582, 583, 584, 585, 559, 566, 558, 0, 559, 520, 524, 523, 566, 481, 483, 514, 586, 474, 475, 585, 424, 423, 555, 586, 586, 555, 471, 474, 423, 382, 552, 555, 409, 562, 537, 392, 501, 489, 571, 0, 9, 565, 492, 491, 494, 493, 472, 471, 212, 540, 492, 565, 559, 523, 481, 566, 553, 490, 492, 0, 575, 574, 588, 589, 527, 463, 466, 560, 464, 541, 543, 465, 512, 10, 9, 491, 10, 493, 495, 0, 586, 585, 584, 424, 424, 584, 428, 0, 525, 505, 504, 533, 456, 518, 579, 454, 532, 549, 525, 533, 460, 524, 454, 461, 518, 506, 561, 579, 489, 488, 502, 0, 517, 215, 248, 0, 551, 540, 227, 0, 562, 561, 506, 537, 570, 539, 568, 572, 568, 539, 538, 567, 590, 497, 500, 0, 590, 591, 498, 497, 507, 535, 534, 504, 534, 531, 533, 504, 475, 592, 582, 0, 593, 594, 595, 596, 557, 596, 595, 558, 597, 592, 475, 0, 596, 438, 437, 593, 598, 440, 439, 583, 592, 597, 599, 598, 598, 599, 443, 440, 595, 594, 475, 0, 582, 592, 598, 583, 584, 583, 439, 428, 585, 475, 582, 0, 596, 557, 388, 438, 556, 558, 475, 0, 595, 475, 558, 0, 503, 548, 588, 574, 511, 457, 589, 564, 563, 564, 589, 588, 547, 563, 588, 548, 589, 457, 480, 575, 600, 601, 602, 0, 603, 604, 600, 602, 605, 606, 604, 603, 534, 536, 528, 531, 498, 591, 536, 535, 607, 606, 605, 608, 573, 571, 489, 503, 548, 517, 547, 0, 9, 1, 565, 0, 493, 10, 512, 0, 553, 551, 473, 0, 609, 610, 611, 612, 609, 613, 614, 610, 613, 615, 616, 614, 617, 618, 616, 615, 617, 619, 620, 618, 619, 621, 622, 620, 621, 623, 624, 622, 623, 625, 626, 624, 625, 627, 628, 626, 627, 629, 630, 628, 629, 631, 632, 630, 612, 611, 632, 631, 610, 614, 633, 0, 610, 633, 611, 0, 611, 633, 632, 0, 630, 632, 633, 0, 628, 630, 633, 0, 626, 628, 633, 0, 624, 626, 633, 0, 622, 624, 633, 0, 620, 622, 633, 0, 618, 620, 633, 0, 616, 618, 633, 0, 614, 616, 633, 0, 634, 635, 636, 637, 636, 638, 639, 637, 638, 640, 641, 639, 641, 640, 642, 643, 642, 644, 645, 643, 644, 646, 647, 645, 646, 648, 649, 647, 648, 650, 651, 649, 650, 652, 653, 651, 652, 654, 655, 653, 654, 656, 657, 655, 657, 656, 635, 634, 658, 638, 636, 0, 635, 658, 636, 0, 656, 658, 635, 0, 658, 656, 654, 0, 658, 654, 652, 0, 658, 652, 650, 0, 658, 650, 648, 0, 658, 648, 646, 0, 658, 646, 644, 0, 658, 644, 642, 0, 658, 642, 640, 0, 658, 640, 638, 0, };
    int const vcount = ( sizeof( vertices ) / sizeof( *vertices ) ) / 3;
	int const qcount = ( sizeof( indices ) / sizeof( *indices ) / 4 );
    
	float px = -pos[ 0 ]; float py = -pos[ 1 ]; float pz = pos[ 2 ]; 	
	float rx = -rot[ 0 ]; float ry = -rot[ 1 ]; float rz = rot[ 2 ];
	
	(void) px, py, pz;

	float zmax = -FLT_MAX;
	float zmin = FLT_MAX;
    for( int i = 0; i < vcount; ++i ) // transform vertices
		{
        float const s = 0.8f; float xp, yp, zp;
        float x = vertices[ i * 3 + 0 ] * s ;
        float y = ( -vertices[ i * 3 + 1 ] - 0.05f ) * s;
        float z = vertices[ i * 3 + 2 ] * s;        
        yp = y * cosf( rx ) - z * sinf( rx ); zp = z * cosf( rx ) + y * sinf( rx ); y = yp; z = zp;       
        xp = x * cosf( ry ) - z * sinf( ry ); zp = z * cosf( ry ) + x * sinf( ry ); x = xp; z = zp;
        xp = x * cosf( rz ) - y * sinf( rz ); yp = y * cosf( rz ) + x * sinf( rz ); x = xp; y = yp;
		if( z < zmin ) zmin = z;
		if( z > zmax ) zmax = z;
        vertices[ i * 3 + 0 ] = x - px; vertices[ i * 3 + 1 ] = y + py;  vertices[ i * 3 + 2 ] = z; 
		}

	struct quad_t 
		{ 
		float z; 
		int indices[ 4 ]; 
		
		bool operator<( quad_t const& other ) const { return z < other.z; }
		bool operator>( quad_t const& other ) const { return z > other.z; }
		};
	quad_t quads[ qcount ] = { 0 };
	for( int i = 0; i < qcount; ++i ) 
		{ 
		int count = 4;
		float z = 0.0f;
		for( int j = 0; j < 4; ++j )
			{
			quads[ i ].indices[ j ] = indices[ i * 4 + j ];
			int q = quads[ i ].indices[ j ] - 1; 
			if( q < 0 ) 
				{ 
				q = quads[ i ].indices[ 0 ] - 1; 
				count = 3; 
				}
			else
				z += vertices[ indices[ i * 4 + j ] * 3 + 2 ];
			}
		quads[ i ].z = z / count;
		}
		
	sort_ns::sort( quads, qcount );
		
	for( int i = 0; i < qcount; ++i ) // draw faces
		{        
        int v[ 4 * 2 ];
		int c[ 4 ];
		int count = 4;
        for( int j = 0; j < 4; ++j )
			{
            int q = quads[ i ].indices[ j ] - 1; if( q < 0 ) { q = quads[ i ].indices[ 0 ] - 1; count = 3; }
            v[ j * 2 + 0 ] = (int)( ( vertices[ q * 3 + 0 ] * ( 1.0f - 0.3f * pz ) ) * ( h + h / 3 ) + 0.5f ) + w / 2;                  
            v[ j * 2 + 1 ] = (int)( ( vertices[ q * 3 + 1 ] * ( 1.0f - 0.3f * pz ) ) * ( h  ) + 0.5f ) + h / 2;                  
            c[ j ] =  (int)clamp(( ( ( vertices[ q * 3 + 2 ] - zmin ) / ( zmax - zmin )  ) * 250 ), 0, 250 );
			}
					
		screen->polygon_fill<16>( v, count, 0 );
        screen->line( v[ 0 ], y_offset + v[ 1 ], v[ 2 ], y_offset + v[ 3 ], (uint8_t) ( ( c[ 0 ] + v[ 1 ] ) / 2 ) );
        screen->line( v[ 2 ], y_offset + v[ 3 ], v[ 4 ], y_offset + v[ 5 ], (uint8_t) ( ( c[ 1 ] + v[ 2 ] ) / 2 ) );
		screen->line( v[ 4 ], y_offset + v[ 5 ], v[ 6 ], y_offset + v[ 7 ], (uint8_t) ( ( c[ 2 ] + v[ 3 ] ) / 2 ) );
		screen->line( v[ 6 ], y_offset + v[ 7 ], v[ 0 ], y_offset + v[ 1 ], (uint8_t) ( ( c[ 3 ] + v[ 0 ] ) / 2 ) );
		}
	}
	
	
struct point { int x; int y; };



struct gamestate_test3d : gamestate_common
	{	
	gamestate_test3d( object_repo* ctx ) : gamestate_common( ctx )
		{
		}
		
		
	void update( object_repo* )
		{
		update_fps();
		
		point points[3];
		points[ 0 ].x = 150 + 100; points[ 0 ].y = 0-10;
		points[ 1 ].x = 150 +   0-10; points[ 1 ].y = 100;
		points[ 2 ].x = 150 + 250; points[ 2 ].y = 199+10;
		int count = 3;
		int color = 255;
        for( int i = 0; i < 2000-666; ++i )
			graph->polygon_fill<16>( (int*)points, count, (uint8_t) color );

		static float cx = 0.0f;
		cx += 0.01f;
		render_head( 0, float3( 0.0f ), float3( 0.0f, cx, 0.0f ), graph );
		graph->circle( (int)tobii->gaze_point.position_xy[ 0 ], (int)tobii->gaze_point.position_xy[ 1 ], 15, (uint8_t) color );
		}
	
	};
	
